############################################################
#
# Autogenerated by the KBase type compiler -
# any changes made here will be overwritten
#
############################################################

try:
    import json as _json
except ImportError:
    import sys
    sys.path.append('simplejson-2.3.3')
    import simplejson as _json

import requests as _requests
import urlparse as _urlparse
import random as _random
import base64 as _base64
from ConfigParser import ConfigParser as _ConfigParser
import os as _os

_CT = 'content-type'
_AJ = 'application/json'
_URL_SCHEME = frozenset(['http', 'https'])


def _get_token(user_id, password,
               auth_svc='https://nexus.api.globusonline.org/goauth/token?' +
                        'grant_type=client_credentials'):
    # This is bandaid helper function until we get a full
    # KBase python auth client released
    auth = _base64.encodestring(user_id + ':' + password)
    headers = {'Authorization': 'Basic ' + auth}
    ret = _requests.get(auth_svc, headers=headers, allow_redirects=True)
    status = ret.status_code
    if status >= 200 and status <= 299:
        tok = _json.loads(ret.text)
    elif status == 403:
        raise Exception('Authentication failed: Bad user_id/password ' +
                        'combination for user %s' % (user_id))
    else:
        raise Exception(ret.text)
    return tok['access_token']


def _read_rcfile(file=_os.environ['HOME'] + '/.authrc'):  # @ReservedAssignment
    # Another bandaid to read in the ~/.authrc file if one is present
    authdata = None
    if _os.path.exists(file):
        try:
            with open(file) as authrc:
                rawdata = _json.load(authrc)
                # strip down whatever we read to only what is legit
                authdata = {x: rawdata.get(x) for x in (
                    'user_id', 'token', 'client_secret', 'keyfile',
                    'keyfile_passphrase', 'password')}
        except Exception, e:
            print "Error while reading authrc file %s: %s" % (file, e)
    return authdata


def _read_inifile(file=_os.environ.get(  # @ReservedAssignment
                  'KB_DEPLOYMENT_CONFIG', _os.environ['HOME'] +
                  '/.kbase_config')):
    # Another bandaid to read in the ~/.kbase_config file if one is present
    authdata = None
    if _os.path.exists(file):
        try:
            config = _ConfigParser()
            config.read(file)
            # strip down whatever we read to only what is legit
            authdata = {x: config.get('authentication', x)
                        if config.has_option('authentication', x)
                        else None for x in ('user_id', 'token',
                                            'client_secret', 'keyfile',
                                            'keyfile_passphrase', 'password')}
        except Exception, e:
            print "Error while reading INI file %s: %s" % (file, e)
    return authdata


class ServerError(Exception):

    def __init__(self, name, code, message, data=None, error=None):
        self.name = name
        self.code = code
        self.message = '' if message is None else message
        self.data = data or error or ''
        # data = JSON RPC 2.0, error = 1.1

    def __str__(self):
        return self.name + ': ' + str(self.code) + '. ' + self.message + \
            '\n' + self.data


class _JSONObjectEncoder(_json.JSONEncoder):

    def default(self, obj):
        if isinstance(obj, set):
            return list(obj)
        if isinstance(obj, frozenset):
            return list(obj)
        return _json.JSONEncoder.default(self, obj)


class Catalog(object):

    def __init__(self, url=None, timeout=30 * 60, user_id=None,
                 password=None, token=None, ignore_authrc=False,
                 trust_all_ssl_certificates=False):
        if url is None:
            raise ValueError('A url is required')
        scheme, _, _, _, _, _ = _urlparse.urlparse(url)
        if scheme not in _URL_SCHEME:
            raise ValueError(url + " isn't a valid http url")
        self.url = url
        self.timeout = int(timeout)
        self._headers = dict()
        self.trust_all_ssl_certificates = trust_all_ssl_certificates
        # token overrides user_id and password
        if token is not None:
            self._headers['AUTHORIZATION'] = token
        elif user_id is not None and password is not None:
            self._headers['AUTHORIZATION'] = _get_token(user_id, password)
        elif 'KB_AUTH_TOKEN' in _os.environ:
            self._headers['AUTHORIZATION'] = _os.environ.get('KB_AUTH_TOKEN')
        elif not ignore_authrc:
            authdata = _read_inifile()
            if authdata is None:
                authdata = _read_rcfile()
            if authdata is not None:
                if authdata.get('token') is not None:
                    self._headers['AUTHORIZATION'] = authdata['token']
                elif(authdata.get('user_id') is not None
                     and authdata.get('password') is not None):
                    self._headers['AUTHORIZATION'] = _get_token(
                        authdata['user_id'], authdata['password'])
        if self.timeout < 1:
            raise ValueError('Timeout value must be at least 1 second')

    def _call(self, method, params, json_rpc_context = None):
        arg_hash = {'method': method,
                    'params': params,
                    'version': '1.1',
                    'id': str(_random.random())[2:]
                    }
        if json_rpc_context:
            arg_hash['context'] = json_rpc_context

        body = _json.dumps(arg_hash, cls=_JSONObjectEncoder)
        ret = _requests.post(self.url, data=body, headers=self._headers,
                             timeout=self.timeout,
                             verify=not self.trust_all_ssl_certificates)
        if ret.status_code == _requests.codes.server_error:
            json_header = None
            if _CT in ret.headers:
                json_header = ret.headers[_CT]
            if _CT in ret.headers and ret.headers[_CT] == _AJ:
                err = _json.loads(ret.text)
                if 'error' in err:
                    raise ServerError(**err['error'])
                else:
                    raise ServerError('Unknown', 0, ret.text)
            else:
                raise ServerError('Unknown', 0, ret.text)
        if ret.status_code != _requests.codes.OK:
            ret.raise_for_status()
        ret.encoding = 'utf-8'
        resp = _json.loads(ret.text)
        if 'result' not in resp:
            raise ServerError('Unknown', 0, 'An unknown server error occurred')
        return resp['result']
 
    def version(self, json_rpc_context = None):
        if json_rpc_context and type(json_rpc_context) is not dict:
            raise ValueError('Method version: argument json_rpc_context is not type dict as required.')
        resp = self._call('Catalog.version',
                          [], json_rpc_context)
        return resp[0]
  
    def is_registered(self, params, json_rpc_context = None):
        if json_rpc_context and type(json_rpc_context) is not dict:
            raise ValueError('Method is_registered: argument json_rpc_context is not type dict as required.')
        resp = self._call('Catalog.is_registered',
                          [params], json_rpc_context)
        return resp[0]
  
    def register_repo(self, params, json_rpc_context = None):
        if json_rpc_context and type(json_rpc_context) is not dict:
            raise ValueError('Method register_repo: argument json_rpc_context is not type dict as required.')
        resp = self._call('Catalog.register_repo',
                          [params], json_rpc_context)
        return resp[0]
  
    def push_dev_to_beta(self, params, json_rpc_context = None):
        if json_rpc_context and type(json_rpc_context) is not dict:
            raise ValueError('Method push_dev_to_beta: argument json_rpc_context is not type dict as required.')
        self._call('Catalog.push_dev_to_beta',
                   [params], json_rpc_context)
  
    def request_release(self, params, json_rpc_context = None):
        if json_rpc_context and type(json_rpc_context) is not dict:
            raise ValueError('Method request_release: argument json_rpc_context is not type dict as required.')
        self._call('Catalog.request_release',
                   [params], json_rpc_context)
  
    def list_requested_releases(self, json_rpc_context = None):
        if json_rpc_context and type(json_rpc_context) is not dict:
            raise ValueError('Method list_requested_releases: argument json_rpc_context is not type dict as required.')
        resp = self._call('Catalog.list_requested_releases',
                          [], json_rpc_context)
        return resp[0]
  
    def review_release_request(self, review, json_rpc_context = None):
        if json_rpc_context and type(json_rpc_context) is not dict:
            raise ValueError('Method review_release_request: argument json_rpc_context is not type dict as required.')
        self._call('Catalog.review_release_request',
                   [review], json_rpc_context)
  
    def list_basic_module_info(self, params, json_rpc_context = None):
        if json_rpc_context and type(json_rpc_context) is not dict:
            raise ValueError('Method list_basic_module_info: argument json_rpc_context is not type dict as required.')
        resp = self._call('Catalog.list_basic_module_info',
                          [params], json_rpc_context)
        return resp[0]
  
    def add_favorite(self, params, json_rpc_context = None):
        if json_rpc_context and type(json_rpc_context) is not dict:
            raise ValueError('Method add_favorite: argument json_rpc_context is not type dict as required.')
        self._call('Catalog.add_favorite',
                   [params], json_rpc_context)
  
    def remove_favorite(self, params, json_rpc_context = None):
        if json_rpc_context and type(json_rpc_context) is not dict:
            raise ValueError('Method remove_favorite: argument json_rpc_context is not type dict as required.')
        self._call('Catalog.remove_favorite',
                   [params], json_rpc_context)
  
    def list_favorites(self, username, json_rpc_context = None):
        if json_rpc_context and type(json_rpc_context) is not dict:
            raise ValueError('Method list_favorites: argument json_rpc_context is not type dict as required.')
        resp = self._call('Catalog.list_favorites',
                          [username], json_rpc_context)
        return resp[0]
  
    def list_app_favorites(self, item, json_rpc_context = None):
        if json_rpc_context and type(json_rpc_context) is not dict:
            raise ValueError('Method list_app_favorites: argument json_rpc_context is not type dict as required.')
        resp = self._call('Catalog.list_app_favorites',
                          [item], json_rpc_context)
        return resp[0]
  
    def list_favorite_counts(self, params, json_rpc_context = None):
        if json_rpc_context and type(json_rpc_context) is not dict:
            raise ValueError('Method list_favorite_counts: argument json_rpc_context is not type dict as required.')
        resp = self._call('Catalog.list_favorite_counts',
                          [params], json_rpc_context)
        return resp[0]
  
    def get_module_info(self, selection, json_rpc_context = None):
        if json_rpc_context and type(json_rpc_context) is not dict:
            raise ValueError('Method get_module_info: argument json_rpc_context is not type dict as required.')
        resp = self._call('Catalog.get_module_info',
                          [selection], json_rpc_context)
        return resp[0]
  
    def get_version_info(self, params, json_rpc_context = None):
        if json_rpc_context and type(json_rpc_context) is not dict:
            raise ValueError('Method get_version_info: argument json_rpc_context is not type dict as required.')
        resp = self._call('Catalog.get_version_info',
                          [params], json_rpc_context)
        return resp[0]
  
    def list_released_module_versions(self, params, json_rpc_context = None):
        if json_rpc_context and type(json_rpc_context) is not dict:
            raise ValueError('Method list_released_module_versions: argument json_rpc_context is not type dict as required.')
        resp = self._call('Catalog.list_released_module_versions',
                          [params], json_rpc_context)
        return resp[0]
  
    def set_registration_state(self, params, json_rpc_context = None):
        if json_rpc_context and type(json_rpc_context) is not dict:
            raise ValueError('Method set_registration_state: argument json_rpc_context is not type dict as required.')
        self._call('Catalog.set_registration_state',
                   [params], json_rpc_context)
  
    def get_module_state(self, params, json_rpc_context = None):
        if json_rpc_context and type(json_rpc_context) is not dict:
            raise ValueError('Method get_module_state: argument json_rpc_context is not type dict as required.')
        resp = self._call('Catalog.get_module_state',
                          [params], json_rpc_context)
        return resp[0]
  
    def get_build_log(self, registration_id, json_rpc_context = None):
        if json_rpc_context and type(json_rpc_context) is not dict:
            raise ValueError('Method get_build_log: argument json_rpc_context is not type dict as required.')
        resp = self._call('Catalog.get_build_log',
                          [registration_id], json_rpc_context)
        return resp[0]
  
    def get_parsed_build_log(self, params, json_rpc_context = None):
        if json_rpc_context and type(json_rpc_context) is not dict:
            raise ValueError('Method get_parsed_build_log: argument json_rpc_context is not type dict as required.')
        resp = self._call('Catalog.get_parsed_build_log',
                          [params], json_rpc_context)
        return resp[0]
  
    def list_builds(self, params, json_rpc_context = None):
        if json_rpc_context and type(json_rpc_context) is not dict:
            raise ValueError('Method list_builds: argument json_rpc_context is not type dict as required.')
        resp = self._call('Catalog.list_builds',
                          [params], json_rpc_context)
        return resp[0]
  
    def delete_module(self, params, json_rpc_context = None):
        if json_rpc_context and type(json_rpc_context) is not dict:
            raise ValueError('Method delete_module: argument json_rpc_context is not type dict as required.')
        self._call('Catalog.delete_module',
                   [params], json_rpc_context)
  
    def migrate_module_to_new_git_url(self, params, json_rpc_context = None):
        if json_rpc_context and type(json_rpc_context) is not dict:
            raise ValueError('Method migrate_module_to_new_git_url: argument json_rpc_context is not type dict as required.')
        self._call('Catalog.migrate_module_to_new_git_url',
                   [params], json_rpc_context)
  
    def set_to_active(self, params, json_rpc_context = None):
        if json_rpc_context and type(json_rpc_context) is not dict:
            raise ValueError('Method set_to_active: argument json_rpc_context is not type dict as required.')
        self._call('Catalog.set_to_active',
                   [params], json_rpc_context)
  
    def set_to_inactive(self, params, json_rpc_context = None):
        if json_rpc_context and type(json_rpc_context) is not dict:
            raise ValueError('Method set_to_inactive: argument json_rpc_context is not type dict as required.')
        self._call('Catalog.set_to_inactive',
                   [params], json_rpc_context)
  
    def is_approved_developer(self, usernames, json_rpc_context = None):
        if json_rpc_context and type(json_rpc_context) is not dict:
            raise ValueError('Method is_approved_developer: argument json_rpc_context is not type dict as required.')
        resp = self._call('Catalog.is_approved_developer',
                          [usernames], json_rpc_context)
        return resp[0]
  
    def list_approved_developers(self, json_rpc_context = None):
        if json_rpc_context and type(json_rpc_context) is not dict:
            raise ValueError('Method list_approved_developers: argument json_rpc_context is not type dict as required.')
        resp = self._call('Catalog.list_approved_developers',
                          [], json_rpc_context)
        return resp[0]
  
    def approve_developer(self, username, json_rpc_context = None):
        if json_rpc_context and type(json_rpc_context) is not dict:
            raise ValueError('Method approve_developer: argument json_rpc_context is not type dict as required.')
        self._call('Catalog.approve_developer',
                   [username], json_rpc_context)
  
    def revoke_developer(self, username, json_rpc_context = None):
        if json_rpc_context and type(json_rpc_context) is not dict:
            raise ValueError('Method revoke_developer: argument json_rpc_context is not type dict as required.')
        self._call('Catalog.revoke_developer',
                   [username], json_rpc_context)
  
    def log_exec_stats(self, params, json_rpc_context = None):
        if json_rpc_context and type(json_rpc_context) is not dict:
            raise ValueError('Method log_exec_stats: argument json_rpc_context is not type dict as required.')
        self._call('Catalog.log_exec_stats',
                   [params], json_rpc_context)
  
    def get_exec_aggr_stats(self, params, json_rpc_context = None):
        if json_rpc_context and type(json_rpc_context) is not dict:
            raise ValueError('Method get_exec_aggr_stats: argument json_rpc_context is not type dict as required.')
        resp = self._call('Catalog.get_exec_aggr_stats',
                          [params], json_rpc_context)
        return resp[0]
  
    def set_client_group(self, group, json_rpc_context = None):
        if json_rpc_context and type(json_rpc_context) is not dict:
            raise ValueError('Method set_client_group: argument json_rpc_context is not type dict as required.')
        self._call('Catalog.set_client_group',
                   [group], json_rpc_context)
  
    def get_client_groups(self, params, json_rpc_context = None):
        if json_rpc_context and type(json_rpc_context) is not dict:
            raise ValueError('Method get_client_groups: argument json_rpc_context is not type dict as required.')
        resp = self._call('Catalog.get_client_groups',
                          [params], json_rpc_context)
        return resp[0]
  
    def is_admin(self, username, json_rpc_context = None):
        if json_rpc_context and type(json_rpc_context) is not dict:
            raise ValueError('Method is_admin: argument json_rpc_context is not type dict as required.')
        resp = self._call('Catalog.is_admin',
                          [username], json_rpc_context)
        return resp[0]
 